# Look at the date range
range(temp30_noNA$startDateTime)
# Check format
str(temp30_noNA$startDateTime)
ggplot(temp30, aes(x=tempSingleMean))+
geom_histogram()
############# Check for outliers ##########
# Do a quick check for strange values and the distribution
ggplot(temp30_noNA, aes(x=tempSingleMean))+
geom_histogram()
temp30_noNA %>%
mutate(month = month(temp_noNA$startDateTime))
temp30_noNA %>%
mutate(month = month(temp30_noNA$startDateTime))
# Make a boxplots by months. First add a column with months
temp30_noNA <- temp30_noNA %>%
mutate(month = month(temp30_noNA$startDateTime))
ggplot(temp30_noNA, aes(x = month, y = tempSingleMean)) +
geom_boxplot()
ggplot(temp30_noNA, aes(x = month, y = tempSingleMean, group = month)) +
geom_boxplot()
############ Make a plot over time ##########
ggplot(temp30_noNA, aes(x = startDateTime, y = tempSingleMean)) +
geom_line()
############ Make a plot over time ##########
ggplot(temp30_noNA, aes(x = startDateTime, y = tempSingleMean)) +
geom_point(size = 0.1) +
ggtitle("30-minute temperature") +
xlab("Date") + ylab("Temperature (degrees Celsius)") +
theme_bw()
temp_plot <- ggplot(temp30_noNA, aes(x = startDateTime, y = tempSingleMean)) +
geom_point(size = 0.1) +
ggtitle("30-minute temperature") +
xlab("Date") + ylab("Temperature (degrees Celsius)") +
theme_bw()
# Save data and save plot
write.csv(temp30_noNA, "Phenology_OSBS/5_Outputs/clean_temp_data.csv", row.names = FALSE)
temp_plot <- ggplot(temp30_noNA, aes(x = startDateTime, y = tempSingleMean)) +
geom_point(size = 0.1) +
ggtitle("30-minute temperature") +
xlab("Date") + ylab("Temperature (degrees Celsius)") +
theme_bw()
pdf("Phenology_OSBS/5_Outputs/temp_plot.pdf", width = 10, height = 7)
temp_plot
dev.off()
# Save data and save plot
write.csv(temp30_noNA, "Phenology_OSBS/2_Clean_data/temp_clean_OSBS.csv", row.names = FALSE)
View(temp30_noNA)
# also make daily data and save
temp30_daily <- temp30_noNA %>%
mutate(day = day(temp30_noNA$startDateTime), year = year(temp30_noNA$startDateTime)) %>%
group_by(year, month, day) %>%
summarize(daily_temp = mean(tempSingleMean))
temp30_daily
# Save data and save plot
write.csv(temp30_noNA, "Phenology_OSBS/2_Clean_data/temp30_clean_OSBS.csv", row.names = FALSE)
write.csv(temp30_daily, "Phenology_OSBS/2_Clean_data/temp_daily_clean_OSBS.csv", row.names = FALSE)
# also make daily data and save
temp30_daily <- temp30_noNA %>%
mutate(day = day(temp30_noNA$startDateTime), year = year(temp30_noNA$startDateTime)) %>%
group_by(year, month, day) %>%
summarize(daily_temp = mean(tempSingleMean),
date = ymd(paste(year, month, day, sep = "-")))
temp30_daily
temp30_daily$date <- ymd(paste(year, month, day, sep = "-"))
temp30_daily$date
ymd(paste(year, month, day, sep = "-"))
temp30_daily$date <- ymd(paste(temp30_daily$year, temp30_daily$month, temp30_daily$day, sep = "-"))
temp30_daily$date
ggplot(temp30_daily, aes(x = date, y = daily_temp)) +
geom_point(size = 0.1) +
ggtitle("30-minute temperature") +
xlab("Date") + ylab("Temperature (degrees Celsius)") +
theme_bw()
write.csv(temp30_daily, "Phenology_OSBS/2_Clean_data/temp_daily_clean_OSBS.csv", row.names = FALSE)
pdf("Phenology_OSBS/5_Outputs/temp_daily_plot.pdf", width = 10, height = 7)
temp_plot2
dev.off()
temp_plot2 <- ggplot(temp30_daily, aes(x = date, y = daily_temp)) +
geom_point(size = 0.1) +
ggtitle("30-minute temperature") +
xlab("Date") + ylab("Temperature (degrees Celsius)") +
theme_bw()
pdf("Phenology_OSBS/5_Outputs/temp_daily_plot.pdf", width = 10, height = 7)
temp_plot2
dev.off()
# save plots
pdf("Phenology_OSBS/5_Outputs/pheno_stack.pdf", width = 7, height = 5)
pheno_stack
dev.off()
source('~/OneDrive - University of Florida/TEACHING/FOR6934_Data_wrangling/Week 10 Tidy data - viz_dplyr/Lab_example_project/Phenology_OSBS/4_Scripts/2_Phenology_explore.R', echo=TRUE)
pheno_percent_bar <- ggplot(in_status_yes, aes(date, percent, fill = phenophaseName)) +
geom_bar(stat="identity", position = "stack", na.rm = TRUE) +
ggtitle("Proportion in phenophases") +
xlab("Date") + ylab("Percentage of individuals") +
theme_bw()
pdf("Phenology_OSBS/5_Outputs/pheno_stack_percent.pdf", width = 7, height = 5)
pheno_percent_bar
dev.off()
# Load required libraries
library(tidyverse)
library(lubridate)
# Load the clean data
phe_ind_OSBS <- read_csv("Phenology_OSBS/2_Clean_data/phenology_clean_OSBS.csv")
temp_daily <- read_csv("Phenology_OSBS/2_Clean_data/temp_daily_clean_OSBS.csv")
# Make sure there are dates
class(phe_ind_OSBS$date)
class(temp_daily$date)
# Load required libraries
library(tidyverse)
library(lubridate)
# Load raw data
ind_OSBS <- read.csv('Phenology_OSBS/1_Raw_data/phe_perindividual.csv',
stringsAsFactors = FALSE )
status_OSBS <- read.csv('Phenology_OSBS/1_Raw_data/phe_statusintensity.csv',
stringsAsFactors = FALSE)
# take out column uid, we don't need it
ind_OSBS <- select(ind_OSBS, -uid)
status_OSBS <- select (status_OSBS, -uid)
# retain only unique columns (take duplicates out)
ind_noD_OSBS <- distinct(ind_OSBS)
status_noD_OSBS <- distinct(status_OSBS)
# rename some columns: when joining, it is based on common column names,
# but I want to keep some columns separate (so I give them a different name)
# where is there an intersection of names
same_name <- intersect(names(status_noD_OSBS), names(ind_noD_OSBS))
same_name
# rename(dataframe, new_name = old_name)
status_noD_OSBS <- rename(status_noD_OSBS, editedDateStat=editedDate,
measuredByStat=measuredBy, recordedByStat=recordedBy,
samplingProtocolVersionStat=samplingProtocolVersion,
remarksStat=remarks, dataQFStat=dataQF)
# convert date to date type, use lubridate
ind_noD_OSBS$date <- ymd(ind_noD_OSBS$date)
status_noD_OSBS$date <- ymd(status_noD_OSBS$date)
# only take the last edited individuals
ind_last_OSBS <- ind_noD_OSBS %>%
group_by(individualID) %>%
filter(editedDate==max(editedDate))
# just in case there are duplicate dates for an individual
ind_lastnoD_OSBS <- ind_last_OSBS %>%
group_by(editedDate, individualID) %>%
filter(row_number()==1)
# now join the two data frames
phe_ind_OSBS <- left_join(status_noD_OSBS, ind_lastnoD_OSBS) # check: leave out ID?
phe_ind_OSBS
status_noD_OSBS
View(status_noD_OSBS)
View(ind_lastnoD_OSBS)
# now join the two data frames
phe_ind_OSBS <- full_join(status_noD_OSBS, ind_lastnoD_OSBS) # check: leave out ID?
View(phe_ind_OSBS)
View(status_noD_OSBS)
View(ind_OSBS)
View(status_OSBS)
# Load raw data
ind_OSBS <- read.csv('Phenology_OSBS/1_Raw_data/phe_perindividual.csv',
stringsAsFactors = FALSE )
status_OSBS <- read.csv('Phenology_OSBS/1_Raw_data/phe_statusintensity.csv',
stringsAsFactors = FALSE)
# take out column uid, we don't need it. Also take out date for the individual,
# as we don't want to merge using this
ind_OSBS <- select(ind_OSBS, -uid, -date)
status_OSBS <- select (status_OSBS, -uid) # for status we do want date, as this is
# retain only unique columns (take duplicates out)
ind_noD_OSBS <- distinct(ind_OSBS)
status_noD_OSBS <- distinct(status_OSBS)
# rename some columns: when joining, it is based on common column names,
# but I want to keep some columns separate (so I give them a different name)
# where is there an intersection of names
same_name <- intersect(names(status_noD_OSBS), names(ind_noD_OSBS))
same_name
# rename(dataframe, new_name = old_name)
status_noD_OSBS <- rename(status_noD_OSBS, editedDateStat=editedDate,
measuredByStat=measuredBy, recordedByStat=recordedBy,
samplingProtocolVersionStat=samplingProtocolVersion,
remarksStat=remarks, dataQFStat=dataQF)
ymd(ind_noD_OSBS$date)
# convert date to date type, use lubridate
status_noD_OSBS$date <- ymd(status_noD_OSBS$date)
# only take the last edited individuals
ind_last_OSBS <- ind_noD_OSBS %>%
group_by(individualID) %>%
filter(editedDate==max(editedDate))
# just in case there are duplicate dates for an individual
ind_lastnoD_OSBS <- ind_last_OSBS %>%
group_by(editedDate, individualID) %>%
filter(row_number()==1)
# now join the two data frames
phe_ind_OSBS <- full_join(status_noD_OSBS, ind_lastnoD_OSBS)
# select required columns
names(phe_ind_OSBS)
phe_ind_OSBS <- select(phe_ind_OSBS, plotID, date, phenophaseName,
phenophaseStatus, phenophaseIntensity, decimalLatitude,
decimalLongitude, elevation, taxonID, scientificName,
growthForm)
View(phe_ind_OSBS)
# save file
write.csv(phe_ind_OSBS, "Phenology_OSBS/2_Clean_data/phenology_clean_OSBS.csv",
row.names = FALSE)
source('~/OneDrive - University of Florida/TEACHING/FOR6934_Data_wrangling/Week 10 Tidy data - viz_dplyr/Lab_example_project/Phenology_OSBS/4_Scripts/2_Phenology_explore.R', echo=TRUE)
# Load the clean data
phe_ind_OSBS <- read_csv("Phenology_OSBS/2_Clean_data/phenology_clean_OSBS.csv")
temp_daily <- read_csv("Phenology_OSBS/2_Clean_data/temp_daily_clean_OSBS.csv")
# Make sure there are dates
class(phe_ind_OSBS$date)
class(temp_daily$date)
View(phe_ind_OSBS)
# Filter out only open pollen cones
phe_ind_OSBS_pollen <- phe_ind_OSBS %>%
filter(phenophaseName == "Open pollen cones")
ggplot(phe_ind_OSBS_pollen, aes(date)) +
geom_bar()
phe_ind_OSBS_pollen
# Filter out only open pollen cones
phe_ind_OSBS_pollen <- phe_ind_OSBS %>%
filter(phenophaseName == "Open pollen cones",
phenophaseStatus == "yes")
phe_ind_OSBS_polle
phe_ind_OSBS_pollen
pheno_pollen <- ggplot(phe_ind_OSBS_pollen, aes(date)) +
geom_bar() +
ggtitle("Total individuals in phenophases") +
xlab("Date") + ylab("Number of individuals") +
theme_bw()
pheno_pollen
temp_daily
temp_plot <- ggplot(temp_daily, aes(date, daily_temp)) +
geom_point() +
ggtitle("Ave Daily Air Temperature") +
xlab("") + ylab("Temp (C)") +
theme(plot.title = element_text(lineheight=.8, face="bold", size = 20)) +
theme(text = element_text(size=18))
temp_plot
temp_plot <- ggplot(temp_daily, aes(date, daily_temp)) +
geom_point() +
ggtitle("Ave Daily Air Temperature") +
xlab("") + ylab("Temp (C)") +
theme_bw()
temp_plot
library(cowplot)
combined_plot <- plot_grid(pheno_pollen, temp_plot, cols = 1)
combined_plot <- plot_grid(pheno_pollen, temp_plot, ncol = 1)
combined_plot <- plot_grid(pheno_pollen, temp_plot, ncol = 1)
pdf("Phenology_OSBS/5_Outputs/Pollen_temp.pdf", width = 7, height =12)
combined_plot
dev.off()
# Do some sort of comparison or correlation
# join datasets so we have the dates (temp) lining up
all_data <- left_join(phe_ind_OSBS, temp_daily)
# this is all the data again (so you can also explore relationships with other
# phenopases)
lm(all_data$phenophaseName, all_data$daily_temp)
View(all_data)
# this is all the data again (so you can also explore relationships with other
# phenopases)
all_data_pollen <- all_data %>%
filter(phenophaseName == "Open pollen cones")
all_data_pollen$status
View(all_data_pollen)
lm(all_data_pollen$phenophaseStatus, all_data$daily_temp)
cor(all_data_pollen$phenophaseStatus, all_data$daily_temp)
ggplot(all_data_pollen, aes(y = daily_temp, group = phenophaseStatus)) +
geom_boxplot()
View(all_data)
# what happened? There is also "missed" and "uncertain"!
all_data_pollen <- all_data_pollen %>%
filter(phenoStatus %in% c("yes", "no"))
# what happened? There is also "missed" and "uncertain"!
all_data_pollen <- all_data_pollen %>%
filter(phenophaseStatus %in% c("yes", "no"))
ggplot(all_data_pollen, aes(y = daily_temp, group = phenophaseStatus, fill = phenophaseStatus)) +
geom_boxplot()
View(all_data)
### Hmmm. But maybe that is because this only happens in spring when temperatures rise
ggplot(all_data_pollen, aes(y = daily_temp, group = phenophaseStatus, fill = phenophaseStatus)) +
geom_boxplot() +
facet_grid(vars(month))
### Hmmm. But maybe that is because this only happens in spring when temperatures rise
ggplot(all_data_pollen, aes(y = daily_temp, group = phenophaseStatus, fill = phenophaseStatus)) +
geom_boxplot() +
facet_wrap(vars(month))
View(all_data)
# Project example
# OSBS phenology data and temperature
# Analysis of temperature and pine pollen phenophase
# Load required libraries
library(tidyverse)
library(lubridate)
# Load the clean data
phe_ind_OSBS <- read_csv("Phenology_OSBS/2_Clean_data/phenology_clean_OSBS.csv")
temp_daily <- read_csv("Phenology_OSBS/2_Clean_data/temp_daily_clean_OSBS.csv")
# Make sure there are dates
class(phe_ind_OSBS$date)
class(temp_daily$date)
# Filter out only open pollen cones
phe_ind_OSBS_pollen <- phe_ind_OSBS %>%
filter(phenophaseName == "Open pollen cones",
phenophaseStatus == "yes")
# Plot together
pheno_pollen <- ggplot(phe_ind_OSBS_pollen, aes(date)) +
geom_bar() +
ggtitle("Total individuals in phenophases") +
xlab("Date") + ylab("Number of individuals") +
theme_bw()
temp_plot <- ggplot(temp_daily, aes(date, daily_temp)) +
geom_point() +
ggtitle("Ave Daily Air Temperature") +
xlab("") + ylab("Temp (C)") +
theme_bw()
library(cowplot)
combined_plot <- plot_grid(pheno_pollen, temp_plot, ncol = 1)
pdf("Phenology_OSBS/5_Outputs/Pollen_temp.pdf", width = 7, height =12)
combined_plot
dev.off()
# Do some sort of comparison or correlation
# join datasets so we have the dates (temp) lining up
all_data <- left_join(phe_ind_OSBS, temp_daily) #only joins by date
# this is all the data again (so you can also explore relationships with other
# phenopases)
all_data_pollen <- all_data %>%
filter(phenophaseName == "Open pollen cones")
########### Visual analysis of relationships ###########
ggplot(all_data_pollen, aes(y = daily_temp, group = phenophaseStatus)) +
geom_boxplot()
# what happened? There is also "missed" and "uncertain"!
all_data_pollen <- all_data_pollen %>%
filter(phenophaseStatus %in% c("yes", "no"))
ggplot(all_data_pollen, aes(y = daily_temp, group = phenophaseStatus, fill = phenophaseStatus)) +
geom_boxplot()
### Hmmm. But maybe that is because this only happens in spring when temperatures rise
ggplot(all_data_pollen, aes(y = daily_temp, group = phenophaseStatus, fill = phenophaseStatus)) +
geom_boxplot() +
facet_wrap(vars(month))
# Not much difference: so probably mostly related with time of the year?
# Look at the numbers in phenophase per month?
View(all_data)
View(all_data_pollen)
all_data_pollen_count <- all_data_pollen %>%
group_by(month, phenophaseStatus) %>%
summarize(pheno_count = n())
all_data_pollen_count
ggplot(all_data_pollen_count, aes(x = month, y = pheno_count,
group = phenophaseStatus, color = phenophaseStatus)) +
geom_bar(stat = "identity", position = "dodge")
ggplot(all_data_pollen_count, aes(x = month, y = pheno_count,
group = phenophaseStatus, fill = phenophaseStatus)) +
geom_bar(stat = "identity", position = "dodge")
# Load required libraries
library(tidyverse)
library(lubridate)
# Load raw data
ind_OSBS <- read.csv('Phenology_OSBS/1_Raw_data/phe_perindividual.csv',
stringsAsFactors = FALSE )
status_OSBS <- read.csv('Phenology_OSBS/1_Raw_data/phe_statusintensity.csv',
stringsAsFactors = FALSE)
# take out column uid, we don't need it. Also take out date for the individual,
# as we don't want to merge using this
ind_OSBS <- select(ind_OSBS, -uid, -date)
# Load raw data
ind_OSBS <- read.csv('Phenology_OSBS/1_Raw_data/phe_perindividual.csv',
stringsAsFactors = FALSE )
status_OSBS <- read.csv('Phenology_OSBS/1_Raw_data/phe_statusintensity.csv',
stringsAsFactors = FALSE)
View(ind_OSBS)
View(status_OSBS)
# Project example
# OSBS phenology data and temperature
# Cleaning script for temperature data
# Load libraries
library(tidyverse)
library(lubridate)
# Read in raw data
temp30 <- read_csv("Phenology_OSBS/1_Raw_data/SAAT_30min.csv")
temp30
# Check how many records have quality flags
sum(temp30$finalQF==1, na.rm=TRUE)
# Check for NAs
sum(is.na(temp30$tempSingleMean))
# Take out NAs
temp30_noNA <- temp30 %>%
drop_na(tempSingleMean)
# Look at the date range
range(temp30_noNA$startDateTime)
# Check format
str(temp30_noNA$startDateTime)
# Time format! read_csv did that automatically for use
############# Check for outliers ##########
# Do a quick check for strange values and the distribution
ggplot(temp30_noNA, aes(x=tempSingleMean))+
geom_histogram()
# Make a boxplots by months. First add a column with months
temp30_noNA <- temp30_noNA %>%
mutate(month = month(temp30_noNA$startDateTime))
temp30_noNA
ggplot(temp30_noNA, aes(x = month, y = tempSingleMean, group = month)) +
geom_boxplot()
# Load required libraries
library(tidyverse)
library(lubridate)
# Load the clean data
phe_ind_OSBS <- read_csv("Phenology_OSBS/2_Clean_data/phenology_clean_OSBS.csv")
temp_daily <- read_csv("Phenology_OSBS/2_Clean_data/temp_daily_clean_OSBS.csv")
# Make sure there are dates
class(phe_ind_OSBS$date)
class(temp_daily$date)
View(phe_ind_OSBS)
# Filter out only open pollen cones
phe_ind_OSBS_pollen <- phe_ind_OSBS %>%
filter(phenophaseName == "Open pollen cones",
phenophaseStatus == "yes")
View(phe_ind_OSBS_pollen)
ggplot(phe_ind_OSBS_pollen, aes(date)) +
geom_bar() +
ggtitle("Total individuals in phenophases") +
xlab("Date") + ylab("Number of individuals") +
theme_bw()
# Plot together
pheno_pollen <- ggplot(phe_ind_OSBS_pollen, aes(date)) +
geom_bar() +
ggtitle("Total individuals in phenophases") +
xlab("Date") + ylab("Number of individuals") +
theme_bw()
ggplot(temp_daily, aes(date, daily_temp)) +
geom_point() +
ggtitle("Ave Daily Air Temperature") +
xlab("") + ylab("Temp (C)") +
theme_bw()
temp_plot <- ggplot(temp_daily, aes(date, daily_temp)) +
geom_point() +
ggtitle("Ave Daily Air Temperature") +
xlab("") + ylab("Temp (C)") +
theme_bw()
library(cowplot)
combined_plot <- plot_grid(pheno_pollen, temp_plot, ncol = 1)
combined_plot
############ Look at relationships ##############
# join datasets so we have the dates (temp) lining up
all_data <- left_join(phe_ind_OSBS, temp_daily) #only joins by date
# this is all the data again (so you can also explore relationships with other
# phenopases)
all_data_pollen <- all_data %>%
filter(phenophaseName == "Open pollen cones")
View(all_data_pollen)
ggplot(all_data_pollen, aes(y = daily_temp, group = phenophaseStatus)) +
geom_boxplot()
# what happened? There is also "missed" and "uncertain"!
all_data_pollen <- all_data_pollen %>%
filter(phenophaseStatus %in% c("yes", "no"))
ggplot(all_data_pollen, aes(y = daily_temp, group = phenophaseStatus, fill = phenophaseStatus)) +
geom_boxplot()
### Hmmm. But maybe that is because this only happens in spring when temperatures rise
ggplot(all_data_pollen, aes(y = daily_temp, group = phenophaseStatus, fill = phenophaseStatus)) +
geom_boxplot() +
facet_wrap(vars(month))
all_data_pollen_count <- all_data_pollen %>%
group_by(month, phenophaseStatus) %>%
summarize(pheno_count = n())
all_data_pollen_count
ggplot(all_data_pollen_count, aes(x = month, y = pheno_count,
group = phenophaseStatus, fill = phenophaseStatus)) +
geom_bar(stat = "identity", position = "dodge")
# Load required libraries
library(tidyverse)
library(lubridate)
# Load the clean data
phe_ind_OSBS <- read_csv("Phenology_OSBS/2_Clean_data/phenology_clean_OSBS.csv")
temp_daily <- read_csv("Phenology_OSBS/2_Clean_data/temp_daily_clean_OSBS.csv")
# Make sure there are dates
class(phe_ind_OSBS$date)
class(temp_daily$date)
# Filter out only open pollen cones
phe_ind_OSBS_pollen <- phe_ind_OSBS %>%
filter(phenophaseName == "Open pollen cones",
phenophaseStatus == "yes")
# Plot together
pheno_pollen <- ggplot(phe_ind_OSBS_pollen, aes(date)) +
geom_bar() +
ggtitle("Total individuals in phenophases") +
xlab("Date") + ylab("Number of individuals") +
theme_bw()
pheno_pollen
temp_plot <- ggplot(temp_daily, aes(date, daily_temp)) +
geom_point() +
ggtitle("Ave Daily Air Temperature") +
xlab("") + ylab("Temp (C)") +
theme_bw()
temp_plot
############ Look at relationships ##############
# join datasets so we have the dates (temp) lining up
all_data <- left_join(phe_ind_OSBS, temp_daily) #only joins by date
# this is all the data again (so you can also explore relationships with other
# phenopases)
all_data_pollen <- all_data %>%
filter(phenophaseName == "Open pollen cones")
ggplot(all_data_pollen, aes(y = daily_temp, group = phenophaseStatus)) +
geom_boxplot()
# what happened? There is also "missed" and "uncertain"!
all_data_pollen <- all_data_pollen %>%
filter(phenophaseStatus %in% c("yes", "no"))
ggplot(all_data_pollen, aes(y = daily_temp, group = phenophaseStatus, fill = phenophaseStatus)) +
geom_boxplot()
### Hmmm. But maybe that is because this only happens in spring when temperatures rise
ggplot(all_data_pollen, aes(y = daily_temp, group = phenophaseStatus, fill = phenophaseStatus)) +
geom_boxplot() +
facet_wrap(vars(month))
all_data_pollen_count <- all_data_pollen %>%
group_by(month, phenophaseStatus) %>%
summarize(pheno_count = n())
ggplot(all_data_pollen_count, aes(x = month, y = pheno_count,
group = phenophaseStatus, fill = phenophaseStatus)) +
geom_bar(stat = "identity", position = "dodge")
